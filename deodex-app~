#!/bin/bash
#
# Script to deodex an apps or frameworks
#
# Brandon McAnsh a.k.a bmc08gt (C) 2015
# Heavliy edited by Aaahh
#

FILE=$2

NC='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
LGREY='\033[0;37m'

case $1 in
    -a) echo ""
        echo -e "${YELLOW}Apk${NC} flag detected"
        MODE=1
        if ! [[ "$FILE" = *.apk ]]; then
            FILE=$FILE.apk
        fi
        shift ;;
    -apk) echo ""
        echo -e "${YELLOW}Apk${NC} flag detected"
        MODE=1
        if ! [[ "$FILE" = *.apk ]]; then
            FILE=$FILE.apk
        fi
        shift ;;
    -j) echo ""
        echo -e "${YELLOW}Framework${NC} flag detected"
        MODE=2
        if ! [[ "$FILE" = *.jar ]]; then
            FILE=$FILE.jar
        fi
        shift ;;
    -jar) echo ""
        echo -e "${YELLOW}Framework${NC} flag detected"
        MODE=2
        if ! [[ "$FILE" = *.jar ]]; then
            FILE=$FILE.jar
        fi
        shift ;;
    -h) echo ""
        echo " -h || -help : Shows this message"
        echo " -a || -apk (file) : Sets apk flag"
        echo " -j || -jar (file) : Sets framework flag"
        exit 0
        shift ;;
    -help) echo ""
        echo " -h || -help : Shows this message"
        echo " -a || -apk (file) : Sets apk flag"
        echo " -j || -jar (file) : Sets framework flag"
        exit 0
        shift ;;
    -*) echo ""
        echo "Unrecognized flag"
        shift ;;
    *) FILE=$1
    ;;
esac



if [ -z "$MODE" ]; then

case $2 in
    -a) echo ""
        echo -e "${YELLOW}Apk${NC} flag detected"
        MODE=1
        if ! [[ "$FILE" = *.apk ]]; then
            FILE=$FILE.apk
        fi
        shift ;;
    -apk) echo ""
        echo -e "${YELLOW}Apk${NC} flag detected"
        MODE=1
        if ! [[ "$FILE" = *.apk ]]; then
            FILE=$FILE.apk
        fi
        shift ;;
    -j) echo ""
        echo -e "${YELLOW}Framework${NC} flag detected"
        MODE=2
        if ! [[ "$FILE" = *.jar ]]; then
            FILE=$FILE.jar
        fi
        shift ;;
    -jar) echo ""
        echo -e "${YELLOW}Framework${NC} flag detected"
        MODE=2
        if ! [[ "$FILE" = *.jar ]]; then
            FILE=$FILE.jar
        fi
        shift ;;
    -h) echo ""
        echo " -h || -help : Shows this message"
        echo " -a || -apk (file) : Sets apk flag"
        echo " -j || -jar (file) : Sets framework flag"
        exit 0
        shift ;;
    -help) echo ""
        echo " -h || -help : Shows this message"
        echo " -a || -apk (file) : Sets apk flag"
        echo " -j || -jar (file) : Sets framework flag"
        exit 0
        shift ;;
    -*) echo ""
        echo "Unrecognized flag"  
    ;;
esac

    if [ -z "$MODE" ]; then
        if [[ "$FILE" = *.apk ]]; then
            MODE=1
            echo ""
            echo -e "${YELLOW}Apk${NC} detected"
        fi
        if [[ "$FILE" = *.jar ]]; then
            MODE=2
            echo ""
            echo -e "${YELLOW}Framework${NC} detected"
        fi
        if [ -z "$MODE" ]; then
           echo ""
           echo -e "${RED}Please specify the file extension or add a flag"
           echo "Use -h or -help for more help"
           echo -e "Exiting...${NC}"
           exit 1
        fi
    fi
fi

if [ $MODE = 2 ]; then
    NAME=${FILE%%.jar}
else
    NAME=${FILE%%.apk}
fi

HOME=$(pwd)

FIND=$(find)

echo ""
echo "Finding App" $NAME 

if ! [ -d ${HOME}/system ]; then
    echo ""
    echo -e "${RED}Please copy your /system dir here"
    echo -e "Exiting...${NC}"
    exit 1
fi

FULL_PATH=$(find ${HOME}/system -name $FILE)
if [ -z $FULL_PATH ]; then
    echo -e "${RED}Unable to determine app's location"
    echo -e "Exiting...${NC}"
    exit 1
fi

DIR_PATH=${FULL_PATH%%/$FILE}

if [ $MODE = 2 ]; then
    ODEX_PATH=$DIR_PATH/oat/arm
    echo $ODEX_PATH
fi

echo -e ${YELLOW}$FULL_PATH${NC} "detected."
echo ""

echo "Checking app's architecture,"

if [ $MODE = 2 ]; then
    ARCH=$(find $ODEX_PATH -name arm)
else
    ARCH=$(find $DIR_PATH -name arm)
fi
if [ -z $ARCH ]; then
    ARCH=$(find $DIR_PATH -name arm64)
    if [ -z $ARCH ]; then
        echo -e "${RED}This app is already deodexed."
        echo -e "Exiting...${NC}"
        exit 1
    else
        ARCH='arm64'
    fi
else
    ARCH='arm'
fi

echo -e ${YELLOW}$ARCH${NC} "detected."
echo ""

echo "Creating workspace"
echo ""

if [ -d tmp ]; then
    (cd tmp; find * -maxdepth 0 -name 'framework' -prune -o -exec rm -rf '{}' ';')
else
    mkdir tmp
    echo "Pulling framework"
    echo ""
    (mkdir ${HOME}/tmp/framework; cd ${HOME}/tmp/framework; cp -R ${HOME}/system/framework/* .)
    if [ ! -d ${HOME}/tmp/framework/$ARCH/odex ]; then
        echo "Extracting class-path from boot.oat"
        echo -e ""${LGREY}
        ${HOME}/oat2dex boot ${HOME}/tmp/framework/$ARCH/boot.oat
        echo -e ${NC}
    fi
fi

echo "Pulling $NAME's files"
echo ""

(mkdir ${HOME}/tmp/$NAME; cd ${HOME}/tmp/$NAME; cp -R ${DIR_PATH}/* .)

cp ${HOME}/tmp/$NAME/$FILE ${HOME}/tmp

echo "Creating compatible dex for $FILE"
echo -e ${LGREY}
${HOME}/oat2dex ${HOME}/tmp/$NAME/oat/$ARCH/$NAME.odex ${HOME}/tmp/framework/$ARCH/odex

echo -e ${NC}"Performing smali operations"${LGREY}

${HOME}/oat2dex smali ${HOME}/tmp/$NAME/oat/$ARCH/$NAME.dex
mkdir ${HOME}/tmp/smali
cp -R ${HOME}/tmp/$NAME/oat/$ARCH/$NAME/* ${HOME}/tmp/smali

${HOME}/smali ${HOME}/tmp/smali -o ${HOME}/tmp/classes.dex 

echo -e ${NC}
echo "Pushing dex into" $NAME
echo ""
zip -gjq ${HOME}/tmp/$FILE ${HOME}/tmp/classes.dex

if [ $MODE = 2 ]; then
    mkdir -p ${HOME}/out/
    cp ${HOME}/tmp/$FILE ${HOME}/out

    echo -e "${GREEN}Out:" ${HOME}"/out/"$FILE ${NC}
else
    mkdir -p ${HOME}/out/$NAME
    cp ${HOME}/tmp/$FILE ${HOME}/out/$NAME

    echo -e "${GREEN}Out:" ${HOME}"/out/"$NAME"/"$FILE ${NC}
fi

echo ""
exit 0
