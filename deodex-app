#!/bin/bash
#
# Script to deodex an apps
#
# Brandon McAnsh a.k.a bmc08gt (C) 2015
# Heavliy edited by Aaahh
#

FILE=$2

case $1 in
    -a) echo ""
        echo "Apk Flag detected"
        MODE=1
        if ! [ "$FILE" = *.apk ]; then
            FILE=$FILE.apk
        fi
        shift ;;
    -apk) echo ""
        echo "Apk Flag detected"
        MODE=1
        if ! [ "$FILE" = *.apk ]; then
            FILE=$FILE.apk
        fi
        shift ;;
    -j) echo ""
        echo "Framework Flag detected"
        MODE=2
        if ! [ "$FILE" = *.jar ]; then
            FILE=$FILE.jar
        fi
        shift ;;
    -jar) echo ""
        echo "Framework Flag detected"
        MODE=2
        if ! [ "$FILE" = *.jar ]; then
            FILE=$FILE.jar
        fi
        shift ;;
    -h) echo ""
        echo " -h || -help : Shows this message"
        echo " -a || -apk (file) : Sets apk flag"
        echo " -j || -jar (file) : Sets framework flag"
        exit 0
        shift ;;
    -help) echo ""
        echo " -h || -help : Shows this message"
        echo " -a || -apk (file) : Sets apk flag"
        echo " -j || -jar (file) : Sets framework flag"
        exit 0
        shift ;;
    -*) echo ""
        echo "Unrecognized Flag"
        shift ;;
    *) FILE=$1    
    ;;
esac

if [ -z $MODE ]; then
    if [ "$FILE" = *.apk ]; then
        MODE=1
        echo ""
        echo "Apk detected"
    fi
    if [ "$FILE" = *.jar ]; then
        MODE=2
        echo ""
        echo "Framework detected"
    fi
    if [ -z $MODE ]; then
        echo ""
        echo "Please specify the file extension or add a flag"
        echo "Use -h or -help for more help"
        echo "Exiting...."
        exit 1
    fi
fi

NAME=${FILE%%.*}

HOME=$(pwd)

FIND=$(find)

echo ""
echo "Finding App" $NAME 

if ! [ -d ${HOME}/system ]; then
    echo ""
    echo "Please copy your /system dir here"
    echo "Exiting...."
    exit 1
fi

FULL_PATH=$(find ${HOME}/system -name $FILE)
if [ -z $FULL_PATH ]; then
    echo "Unable to determine app's location"
    echo "Exiting...."
    exit 1
fi

DIR_PATH=${FULL_PATH%%/$FILE}

echo $FULL_PATH "detected."
echo ""

echo "Checking app's architecture"

ARCH=$(find $DIR_PATH -name arm)
if [ -z $ARCH ]; then
    ARCH=$(find $DIR_PATH -name arm64)
    if [ -z $ARCH ]; then
        echo "This app is already deodexed."
        echo "Exiting...."
        exit 1
    else
        ARCH='arm64'
    fi
else
    ARCH='arm'
fi

echo $ARCH "detected."
echo ""

echo "Creating workspace"
echo ""

if [ -d tmp ]; then
    (cd tmp; find * -maxdepth 0 -name 'framework' -prune -o -exec rm -rf '{}' ';')
else
    mkdir tmp
    echo "Pulling framework"
    echo ""
    (mkdir ${HOME}/tmp/framework; cd ${HOME}/tmp/framework; cp -R ${HOME}/system/framework/* .)
    if [ ! -d ${HOME}/tmp/framework/$ARCH/odex ]; then
        echo "Extracting class-path from boot.oat"
        echo ""
        ${HOME}/oat2dex boot ${HOME}/tmp/framework/$ARCH/boot.oat
    fi
fi

echo "Pulling $NAME's files"
echo ""
(mkdir ${HOME}/tmp/$NAME; cd ${HOME}/tmp/$NAME; cp -R ${DIR_PATH}/* .)

cp ${HOME}/tmp/$NAME/$FILE ${HOME}/tmp

echo "Creating compatible dex for $FILE"
echo ""
${HOME}/oat2dex ${HOME}/tmp/$NAME/oat/$ARCH/$NAME.odex ${HOME}/tmp/framework/$ARCH/odex

echo "Performing smali operations"
echo ""
#${HOME}/baksmali -a 21 -x ${HOME}/tmp/$NAME/oat/$ARCH/$NAME.dex -d system/framework -o ${HOME}/tmp/smali
${HOME}/oat2dex smali ${HOME}/tmp/$NAME/oat/$ARCH/$NAME.dex
mkdir ${HOME}/tmp/smali
cp -R ${HOME}/tmp/$NAME/oat/$ARCH/$NAME/* ${HOME}/tmp/smali

${HOME}/smali ${HOME}/tmp/smali -o ${HOME}/tmp/classes.dex 

echo "Pushing dex into" $NAME
echo ""
zip -gjq $FILE ${HOME}/tmp/classes.dex

mkdir -p ${HOME}/out
cp $FILE ${HOME}/out/

echo "Out:" ${HOME}"/out/"$FILE
echo ""
exit 0
